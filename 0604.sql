CREATE USER DB1
IDENTIFIED BY "1111";

CREATE USER DB2
IDENTIFIED BY "1111";

CREATE USER DB3
IDENTIFIED BY "1111";

GRANT CONNECT TO DB1;
GRANT CONNECT TO DB2;
GRANT CONNECT TO DB3;

SELECT*FROM DBA_USERS;

CREATE TABLE EMP(
    EMP_NAME NVARCHAR2(5)
);

INSERT INTO EMP VALUES('신희태');
INSERT INTO EMP VALUES('이소현');
INSERT INTO EMP VALUES('김도연');

GRANT ALL ON EMP TO DB1;
GRANT ALL ON EMP TO DB2;
GRANT ALL ON EMP TO DB3;

COMMIT;

SELECT*FROM DBA_USERS;

ALTER USER DB1 ACCOUNT UNLOCK;
ALTER USER DB2 ACCOUNT UNLOCK;
ALTER USER DB3 ACCOUNT UNLOCK;

ALTER USER DB1 IDENTIFIED BY 9999;
ALTER USER DB2 IDENTIFIED BY 9999;
ALTER USER DB3 IDENTIFIED BY 9999;

DROP TABLE JSMEMBER;

CREATE TABLE JSMEMBER(
JSMEMBER_NAME    NVARCHAR2(5),
JSMEMBER_AGE     NUMBER(2),
JSMEMBER_PHONE     NVARCHAR2(13),
JSMEMBER_DATE     DATE,
JSMEMBER_ADR     NVARCHAR2(20),
JSMEMBER_EMAIL     NVARCHAR2(30),
JSMEMBER_HOBBY     NVARCHAR2(30)
);

SELECT*FROM JSMEMBER;

INSERT INTO JSMEMBER
VALUES('이유진',30,'01012345678','1991-01-21','인천','dldbwls12321@naver.com','조립');

INSERT INTO JSMEMBER(JSMEMBER_NAME,JSMEMBER_AGE,JSMEMBER_PHONE,JSMEMBER_DATE,JSMEMBER_ADR,JSMEMBER_EMAIL,JSMEMBER_HOBBY)
VALUES('신희태',26,'01012345678','1995-11-28','인천','GMLXO@naver.com','명상');

INSERT INTO JSMEMBER(JSMEMBER_NAME,JSMEMBER_AGE,JSMEMBER_PHONE,JSMEMBER_DATE,JSMEMBER_ADR,JSMEMBER_EMAIL,JSMEMBER_HOBBY)
VALUES('이소현',28,'01012345678','1912-01-11','인천','THGUS@naver.com','자기');

INSERT INTO JSMEMBER(JSMEMBER_NAME,JSMEMBER_AGE,JSMEMBER_PHONE,JSMEMBER_DATE,JSMEMBER_ADR,JSMEMBER_EMAIL,JSMEMBER_HOBBY)
VALUES('김도연',26,'01078965432','1978-04-06','인천','EHDUS@naver.com','음악감상');

GRANT ALL ON JSMEMBER TO DB1;
GRANT ALL ON JSMEMBER TO DB2;
GRANT ALL ON JSMEMBER TO DB3;

GRANT SELECT ON JSMEMBER TO DB1;
GRANT SELECT ON JSMEMBER TO DB2;
GRANT SELECT ON JSMEMBER TO DB3;

--테이블에 대한 전체 권한(ALL ON)
--GRANT ALL ON STUDENT TO "";

--테이블 검색 권한
--GRANT SELECT ON "" TO "";
--------------------------------------------6.3------------------------------------------

--DROP TABLE[TABLE_NAME]
DROP TABLE JSMEMBER;

--CREATE
--CREATE TABLE [TABLE_NAME](
--      [COL1_NAME] [COL1 TYPE] )

CREATE TABLE JSMEMBER(          --이름 나이 전화번호
    JSNAME NVARCHAR2(5), 
    JSAGE  NUMBER(2),
    JSPHONE NVARCHAR2(13)
);

--ALTER
/*
    AKTER TABLE [TABLE_NAME]
    1)ADD : COLUMN 추가
    2)RENAME : COLUMN 이름변경
    3)MODIFY : COLUMN 타입변경
    4)DROP : COLUMN 삭제
*/

--생일추가
--JSNAME에서 NAME_JS컬럼명 변경
--AGE타입을 NVARCHAR(3)으로 변경
--JSPHONE컬럼 삭제

ALTER TABLE JSMEMBER
ADD JSBIRTH DATE;

ALTER TABLE JSMEMBER
RENAME COLUMN JSNAME TO NAME_JS;

ALTER TABLE JSMEMBER
MODIFY JSAGE NVARCHAR2(20);

ALTER TABLE JSMEMBER
DROP COLUMN JSPHONE;


--DML(Data Manipulation Language) 조작어

--1.INSERT
/*
1) 모든 COLUMN 데이터를 삽입할 때
-INSERT INTO [TABLE_NAME]
 VALUES(COL1 DATA,COL2 DATA, .... COL N DATA);
2) 특정 COLUMN 데이터를 삽입할 때
-INSERT INTO [TABLE_NAME](COL2 NAME,COL3 NAME)
 VALUES(COL2 DATA, COL3 DATA);
*/

SELECT*FROM JSMEMBER;

INSERT INTO JSMEMBER
VALUES ('이유진','30','19910121');

--이름하고 생일만 입력.
INSERT INTO JSMEMBER(NAME_JS,JSBIRTH)
VALUES ('이유진', SYSDATE);

ALTER SESSION
SET NLS_DATE_FORMAT = 'YYYY-MM-DD HH24:MI:SS';

--2.UPDATE
/*
UPDATE[TABLE_NAME]
SET(COL1_NAME) = (COL1_DATA),(COL2_NAME) = (COL2_DATA)
WHERE [변경데이터 선별조건(CONDITION)];
*/

SELECT * FROM JSMEMBER;

UPDATE JSMEMBER
SET NAME_JS ='유진',JSAGE=40
WHERE NAME_JS ='이유진';

-- 3.DELETE

/*
1)특정데이터를 삭제하는 경우
DELETE FROM[TABLE_NAME]
WHERE [CONDITION(조건)];

2)모든데이터를 삭제하는 경우
DELETE FROM [TABLE_NAME];
*/

DELETE FROM JSMEMBER
WHERE JSAGE = 30;

DELETE FROM JSMEMBER;

--4.SELECT
/*
1)특정 컬럼값 조회
SELECT [COL_NAME]
FROM [TABLE_NAME]
WHERE [CONDITION(조건)]

2)모든 컬럼값 조회
SELECT*
FROM [TABLE_NAME]
WHERE(CONDITION);
*/

--특정
SELECT NAME_JS
FROM JSMEMBER
WHERE JSAGE = 30;

--모든
SELECT *
FROM JSMEMBER
WHERE JSAGE=30;

--테이블 조회,모든 데이터 조회
SELECT * FROM JSMEMBER;

--별칭(ALIAS)을 이용해서 검색하기
SELECT NAME_JS AS 이유진 ,JSAGE AS 나이
FROM JSMEMBER
WHERE JSAGE =30;

--1.컬럼추가
ALTER TABLE JAMEMBER
ADD JSHOBBY NVARCHAR2(20)

ALTER TABLE JAMEMBER
ADD JSPHONE NVARCHAR2(13)
--2.조원들 데이터 입력
UPDATE JSMEMBER
SET NAME_JS ='희태',JSAGE=
WHERE NAME_JS ='이유진';


-----------------------------------------------------6.4---------------------------------------------------------------

/* 오라클 함수
1) 대,소문자를 바꿔주는 함수
   -UPPER : 모두 대문자로 , LOWER :모두 소문자로 , INITCAP : 첫글자 대문자,나머지 소문자
*/   
SELECT UPPER('AbCdEfG') AS "UPPER(대문자)"
FROM DUAL;

SELECT LOWER('AbCdEfG') AS "LOWER(소문자)"
FROM DUAL;

SELECT INITCAP('abCdEfG') AS "INITCAP(첫글자대문자)"
FROM DUAL;

/* 2.문자열 길이를 구하는 LENGTH */
SELECT LENGTH('AbC/dE_fG')AS 문자열 길이
FROM DUAL;
.
--EMP 테이블에서 이름이 5자 이상인 직원조회
SELECT ENAME, LENGTH(ENAME)
FROM EMP WHERE LENGTH(ENAME)>=5;

--LENGTHB : 문자의 크기 조회(BYTE)
SELECT LENGTHB('가') AS 한글 ,LENGTHB('a') AS 소문자 , LENGTHB('A') AS 대문자  FROM DUAL;
-- !,#,_,(공백_
SELECT LENGTHB('!') AS "!" ,LENGTHB('#') AS "#" , LENGTHB('_') AS "_" , LENGTHB('_') AS " " FROM DUAL;

/* 3.문자열 일부를 추출하는 SUBSTR
    SUBSTR('문자열데이터' OR [COL_NAME],시작위치,추출길이)
    SUBSTR('문자열데이터' OR [COL_NAME],시작위치)
*/
-- (1,2)는 1이 시작값 2는 몇개 그래서 H E  (3,2)  LL
SELECT 'HELLO!!',SUBSTR('HELLO!!',1,2),SUBSTR('HELLO!!',3,2),SUBSTR('HELLO!!',5) FROM DUAL;

/*4.문자열 데이터 안에서 특정 문자 위치를 찾는 INSTR
    INSTR('문자열데이터' OR [COL_NAME], 
    '위치를 찾으려는 부분 문자'.
    시작위치(기본값 1),
    같은 문자일 때 몇번째 문자인지(기본값 1))
*/
SELECT INSTR('HELLO, ORACLE!','L') AS INSTR1,
       INSTR('HELLO, ORACLE!','L',5) AS INSTR2,
       INSTR('HELLO, ORACLE!','L',2,3) AS INSTR3 --L이 2번째부터 3번째에 있는 L이 있는 지점.
FROM DUAL;
--O의 위치 찾기
SELECT INSTR('HELLO, ORACLE!','O',1,1) AS INSTR1,
       INSTR('HELLO, ORACLE!','O',1,2) AS INSTR2
FROM DUAL;

--5.특정문자를 다른 문자로 바꾸는 REPLAGE
--  REPLACE('문자데이터' OR[COL_NAME],찾는 문자,바꿀 문자)
--  REPLACE('문자데이터' OR[COL_NAME],찾는 문자);

SELECT 
    --'010-7342-3288' AS "REPLACE 이전",
   UPPER (REPLACE ( REPLACE('abc-1111-2222','abc','010'),'2222','abcd')) AS "변경하세요"
   -- REPLACE ('abc-7342-3288','-') AS "REPLACE선택형"
FROM DUAL;

--1번문제 abc-1111-efgh 을 def-1111-abcd로 변경하고 알파벳을 대문자로 변경하세요. 

--류현진 이후 첫 신기록...소형준,던지면서 더 강해진다
--류현진 =>김혁, 소형준=>김성진

SELECT 
REPLACE( 
REPLACE('류현진 이후 첫 신기록... 소형준, 던지면서 더 강해진다','류현진','김혁'),'소형준','김성진')AS "REPLACE선택형"
FROM DUAL;

--6.두 컬럼 데이터를 합치는 CONCAT
SELECT CONCAT(EMPNO,ENAME),
       CONCAT(EMPNO,CONCAT(':',ENAME))
FROM EMP;

SELECT EMPNO || ENAME AS CONCAT1, EMPNO || ':' || ENAME AS CONCAT2
FROM EMP;

--JOB이 SALESMAN 인 사원 이름 앞에 '힘내세요' 문자 붙여주기
SELECT '힘내세요'|| ENAME AS 사원이름
FROM EMP
WHERE JOB ='SALESMAN';

--7.데이터의 빈 공간을 특정 문자로 채우는 LPAD,RPAD
--LPAD('문자열',데이터자릿수,빈공간에 채울문자(기본값''))
--RPAD('문자열',데이터자릿수,빈공간에 채울문자(기본값''))

SELECT 'ICIA',
        LPAD('ICIA',7,'#') AS LPAD1,
        RPAD('ICIA',7,'*') AS RPAD1,
        LPAD('ICIA',7) AS LPAD2,
        RPAD('ICIA',7) AS RPAD2
FROM DUAL;

--1.주민번호 910121-1******
--2.전화번호010-****-3288

SELECT RPAD('910121-1',13,'*')AS 주민번호 FROM DUAL;
SELECT RPAD(SUBSTR('910121-1234567',1,8),14,'*')AS 주민번호 FROM DUAL;

------------------------------


DROP TABLE JJJSSS;


CREATE TABLE JJJSSS(
    JSNAME NVARCHAR2(3),
    SSN NVARCHAR2(14),
    ASN NVARCHAR2(14)
);

INSERT INTO JJJSSS VALUES('이유진','910121-1234567','010-7342-3288');
INSERT INTO JJJSSS VALUES('신희태','456789-1234567','010-1234-5367');

SELECT*FROM JJJSSS;
 --주민번호
SELECT RPAD(SUBSTR(SSN,1,8),13,'*')AS 주민번호 FROM JJJSSS;

 --전화번호 010-****-1234
SELECT RPAD(SUBSTR(ASN,1,4),8,'*') || SUBSTR(ASN,9) AS 전화번호
FROM JJJSSS;


--1번문제 abc-1111-2222 을 010-1111-abcd(ABCD)로 변경하고 알파벳을 대문자로 변경하세요. 
SELECT 
   UPPER (REPLACE ( REPLACE('abc-1111-2222','abc','010'),'2222','abcd')) AS "변경하세요"
FROM DUAL;

--2번문제 SCOTT에서 세개의 컬럼을 합치세요. 이름/잡/급여
SELECT ENAME || JOB || SAL AS 합체
FROM EMP;